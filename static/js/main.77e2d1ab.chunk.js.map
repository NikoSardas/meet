{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","collapsed","this","setState","event","props","className","Card","Body","Title","summary","Text","location","timeZone","start","dateTime","end","description","Button","variant","onClick","toggleCollapsed","Component","EventList","events","map","etag","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","eventsNumber","localStorage","getItem","isNaN","setItem","e","changeEventsNumber","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77e2d1ab.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Card, Button } from 'react-bootstrap'\r\nclass Event extends Component {\r\n    state = {\r\n        collapsed: true,\r\n    }\r\n    toggleCollapsed() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        })\r\n    }\r\n    render() {\r\n        const { event } = this.props\r\n        return (\r\n            <div className=\"eventWrapper\">\r\n                <Card>\r\n                    {/* <Card.Img variant=\"top\" src=\"holder.js/100px180\" /> */}\r\n                    <Card.Body>\r\n                        <Card.Title className=\"event-summary\">\r\n                            {event.summary}\r\n                        </Card.Title>\r\n                        <Card.Text className=\"event-location\">\r\n                            {event.location}\r\n                        </Card.Text>\r\n                        <Card.Text className=\"event-timeZone\">\r\n                            {event.timeZone}\r\n                        </Card.Text>\r\n                        <Card.Text className=\"event-start\">\r\n                            {event.start.dateTime}\r\n                        </Card.Text>\r\n                        <Card.Text className=\"event-end\">{event.end.dateTime}</Card.Text>\r\n                        <div\r\n                            className={`event-expanded ${!this.state\r\n                                .collapsed}`}\r\n                        >\r\n                            <Card.Text className=\"event-description\">\r\n                                {event.description}\r\n                            </Card.Text>\r\n                        </div>\r\n                        <Button\r\n                            className=\"event-toggle-button\"\r\n                            variant=\"primary\"\r\n                            onClick={() => {\r\n                                this.toggleCollapsed()\r\n                            }}\r\n                        >\r\n                            {this.state.collapsed\r\n                                ? 'Show Details'\r\n                                : 'Hide Details'}\r\n                        </Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Event\r\n","import React, { Component } from 'react'\r\nimport Event from './Event'\r\n\r\nclass EventList extends Component {\r\n    render() {\r\n        const { events } = this.props;\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {events.map((event) => (\r\n                    <li key={event.etag}>\r\n                        <Event event={event} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react'\r\n\r\nclass CitySearch extends Component {\r\n    state = {\r\n        query: '',\r\n        suggestions: [],\r\n    }\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value\r\n        const suggestions = this.props.locations.filter((location) => {\r\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1\r\n        })\r\n        this.setState({\r\n            query: value,\r\n            suggestions,\r\n        })\r\n    }\r\n    handleItemClicked = (suggestion) => {\r\n        this.setState({\r\n            query: suggestion,\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"city\"\r\n                    value={this.state.query}\r\n                    onChange={this.handleInputChanged}\r\n                />\r\n                <ul className=\"suggestions\">\r\n                    {this.state.suggestions.map((suggestion) => (\r\n                        <li\r\n                            key={suggestion}\r\n                            onClick={() => this.handleItemClicked(suggestion)}\r\n                        >\r\n                            {suggestion}\r\n                        </li>\r\n                    ))}\r\n                    <li>\r\n                        <b>See all cities</b>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CitySearch\r\n","import React, { Component } from 'react'\r\n\r\nclass NumberOfEvents extends Component {\r\n    state = {\r\n        eventsNumber: localStorage.getItem('eventsNumber') || 32,\r\n    }\r\n\r\n    changeEventsNumber(eventsNumber) {\r\n        if (eventsNumber > 64) eventsNumber = 64\r\n        if (eventsNumber < 1) eventsNumber = 1\r\n        if (isNaN(eventsNumber)) eventsNumber = this.state.eventsNumber\r\n\r\n        this.setState(\r\n            {\r\n                eventsNumber,\r\n            },\r\n            () => {\r\n                localStorage.setItem('eventsNumber', eventsNumber)\r\n            }\r\n        )\r\n    }\r\n    render() {\r\n        const { eventsNumber } = this.state\r\n        return (\r\n            <div>\r\n                <input\r\n                    className=\"events-number\"\r\n                    type=\"number\"\r\n                    value={eventsNumber}\r\n                    onChange={(e) => {\r\n                        this.changeEventsNumber(e.target.value)\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport EventList from './EventList'\nimport CitySearch from './CitySearch'\nimport NumberOfEvents from './NumberOfEvents'\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <EventList />\n                <CitySearch />\n                <NumberOfEvents />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}